defmodule Vaporator.ClientFs do
  @moduledoc """
  Monitors client-side filesystem events that
  will be synced to a cloud filesystem

  Events are processed to determine the necessary
  CloudFs sync action to be taken.

  file_system event structure:
    {:file_event, process_id, {local_path, [event]}}

  Events supported:
    - :created -> Uploads file to CloudFs
    - :modified -> Updates file in CloudFs
    - :removed -> Removes file from CloudFs
  """
  use GenServer
  require Logger

  @doc """
  Start ClientFs filesystem monitor
  """
  def start_link(path) do
    GenServer.start_link(__MODULE__, path)
  end

  @doc """
  Initializes ClientFs filesystem monitor by
  starting and subscribing to FileSystem monitor
  process.

  Returns:
    {:ok, process_id}
  """
  def init(path) do
    {:ok, pid} = FileSystem.start_link(
      dirs: path,
      recursive: true
    )
    FileSystem.subscribe(pid)
    {:ok, pid}
  end

  @doc """
  Receives and sends FileSystem events to :middleware for
  processing into CloudFs

  Args:
    - file_event (message): Event message generated by FileSystem
      monitoring process
    - state: current state of the `GenServer`
  Returns:
    {:noreply, state}
  """
  def handle_info({:file_event, _, {local_path, [event]}}, state) do
    if event in [:created, :modified, :removed] do
      GenServer.cast(
        Vaporator.Middleware,
        {:queue_event, {event, local_path}}
      )
    else
      Logger.error("Unhandled event -> #{event}")
    end
    {:noreply, state}
  end

end