defmodule Vaporator.ClientFs.EventProducer do
  use GenStage
  require Logger

  def start_link() do
    GenStage.start_link(__MODULE__, :ok, name: __MODULE__)
  end

  @doc """
  Initializes ClientFs filesystem monitor by
  starting and subscribing to FileSystem monitor
  process.

  Returns:
    {:producer, path}
  """
  def init(:ok) do
    {:producer, {:queue.new, 0}}
  end

  #############
  # API
  #############

  @doc """
  Checks for event duplicates or conflicts to avoid unecessary CloudFs api
  calls

  Scenarios Checked:
    - Event already exists in queue
    - If :modified event, does a :created event for that file already exist

  Args:
    event (tuple)

  Returns:
    bool
  """
  def event_conflict?(event, queue) do
    case event do
      {:modified, path} ->
        :queue.member({:created, path}, queue) \
          or :queue.member(event, queue)
      _ ->
        :queue.member(event, queue)
    end
  end

  def dispatch_events(queue, 0, events) do
    {:noreply, Enum.reverse(events), {queue, 0}}
  end

  def dispatch_events(queue, demand, events) do
    case :queue.out(queue) do
      {{:value, event}, queue} ->
        dispatch_events(queue, demand - 1, [event | events])
      {:empty, queue} ->
        {:noreply, Enum.reverse(events), {queue, demand}}
    end
  end

  #############
  # SERVER
  #############

  @doc """
  Receives and sends FileSystem events to :middleware for
  processing into CloudFs

  Args:
    - file_event (message): Event message generated by FileSystem
      monitoring process
    - state: current state of the `GenServer`
  Returns:
    {:noreply, state}
  """
  def handle_cast({:enqueue, event}, {queue, pending_demand}) do
    if not event_conflict?(event, queue) do
      new_queue = :queue.in(event, queue)
      dispatch_events(new_queue, pending_demand, [])
    else
      {:noreply, [], {queue, pending_demand}}
    end
    
  end

  def handle_demand(incoming_demand, {queue, pending_demand}) do
    dispatch_events(queue, pending_demand + incoming_demand, [])
  end

end